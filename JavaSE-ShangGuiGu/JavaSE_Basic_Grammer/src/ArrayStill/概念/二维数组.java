package ArrayStill.概念;
/**
             首地址(变量名) + 索引 = 某个一维数组首地址 + 索引 = 元素
             (变量名在栈内存)指向(堆内存里一维数组的那片连续空间的首地址）,变量名 + 索引 = 一维数组元素(内部存的也是地址)
             每个一维数组的每个空间指向各自元素的首地址,在 + 索引 = 元素
 */
/*
    【二维数组认识】
        通过前面我们知道,数组是引用数据类型的,但是数组的元素可以是任意数据类型
        那么我们将【数组作为数组的元素】也就是引用数据类型数组作为数组的元素,可以吗? (sure这就是二维数组)
        数组arr1 作为 数组arr2 的元素存在, 如果说一维数组是线性结构那么二维数组就是表格结构

    【要素】
        数组名 , 元素(元素是一维数组),每个一维数组又有着属于自己的元素
        长度数组名.length(长度是二维数组里有多少个一维数组) 然后数组名[某个一维数组的索引].length(指的是二维数组中某个一维数组的长度)

    【特点】
        有序地排列(一维数组有序索引)
        数组的类型为引用类型但是数组的元素可以是引用或任意数据类型,此话证明还可以有多维数组
        长度一旦确定便不可改,添加只能创建更大的新数组copy旧数组
        通过下标找到指定位置(很快)
        创建数组意味着在内存开辟一块连续的空间,而数组名引用的是这块连续空间的首地址
    【分类】
        一维数组、二维数组、多维数组......
        数组元素的类型(基本数据类型)(引用数据类型)
 */
public class 二维数组 {
    /**
         二维数组的使用:
         ①声明与初始化
         ②调用数组的指定位置(元素)
         ③获取数组长度
         ④遍历数组
         ⑤数组元素的默认初始化值 就是不赋值是的默认值
         char类型的初识值是 0 而不是 '0' , int 类型的初始值也是 0
         布尔类型的初始值为 false , 引用数据类型的初始值为 null 就是没有赋值的意思
         ⑥数组的内存解析
     */
    public static void main(String[] args) {
        /**创建二维数组---------------------------------------------------------------------------------------------------*/
        //①静态初始化二维数组:声明赋值同时进行(多用于前提知道存放什么数据的情况)
        int[][] ids = new int[][]{{1,2,5,6}, {5,4,8,9}};

        //②动态初始化二位数组:声明与赋值分开进行(names在栈里存首地址,在堆内存开辟出一块长度为5的空间用来存数组引用数据类型)
        String[][] names = new String[5][];
        names[0] = new String[3];//又在names索引为0的位置开辟了一块长度为3的空间,下面是它们各自存的值
        names[0][0] = "张三";
        names[0][1] = "李四";
        names[0][2] = "王五";

        //③动态初始化二维数组:声明与赋值分开进行(多用于后期向数组追加数据中)
        int[][] ages = new int[2][3];//可以将前面看为行(一维数组的总数)  后面看为列(每个一维数组的长度)

        /**获取二维数组长度----------------------------------------------------------------------------------------------*/
        System.out.println("二维数组names的长度: " + names.length);
        //二维数组中某个元素(一维数组)的长度
        System.out.println("二维数组names第一个元素的长度: " + names[0].length);

        /**二维数组存储解析----------------------------------------------------------------------------------------------*/
        /**
         【栈内存】
             是一个线性的结构,有序的
             局部变量都存放在栈内存里面,包含二维数组名字

         【堆内存】
             不是线性的,可以理解为矩阵结构
             用于存放一切new出来的对象,包含二维数组元素
         【问题】
             int[][] arr = new int[][]{{1,2,3},{4,8,4}};
             局部变量数组名存放在栈内存里面,元素是new出来的放在堆内存里面(它们怎么交互?怎么引用?)
         【答案】
             数组名存首地址,索引每个元素
             数组名存在栈内存里,元素存在堆内存里,数组名存的不是具体元素而是连续空间的首地址
             堆内存开辟出来一块连续的空间(存初始值二维数组的初始值是一维数组),数组名指向首地址(16进制数)
             通过数组的(首地址加索引)来引用数组的每个元素,由于空间是连续的所以数组的下标从零开始连续指向后面元素
         */


        /**二维数组的遍历----------------------------------------------------------------------------------------------*/
        String[][] Students = new String[][]{{"张宇", "马雨涵", "马云"}, {"王子涵", "张妮", "雷的"}, {"火炮", "老赵", "郑小凡"}};
        for (int i = 0; i < Students.length; i++) {  //外循环遍历外层一维数组 0, 1, 2共有三个连续空间,且每个空间存的也是一维数组
            for (int j = 0; j < Students[i].length; j++) {  //内循环遍历内层每个一维数组
                /**
                    i的值初始为0递增1, 2... , j的初始为0递增1,2...
                    开始i为0进入循环 j < Students[0].length 也就是j小于第一个一维数组的长度
                    依次进行下去,有第二个元素的话i下次的值为1下来,j还是从零开始j < Students[1].length......
                 */
                System.out.print(Students[i][j] + " ");  //0 0, 0 1, 0 2, 1 0, 1 1, 1 2, 2 0, 2 1, 2 2
            }                                            //【i】第一次 0 0 0  【j】第一次0 1 2
            System.out.println();                        //【i】第二次 1 1 1  【j】第二次0 1 2
        }                                                //【i】第三次 2 2 2  【j】第二次0 1 2
    }
}
