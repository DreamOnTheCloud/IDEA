package ArrayStill.概念;
/*

首地址 + 下标索引 = 元素值

    【概念】
        多个相同类型的数据按一定顺序的集合,并且使用同一个变量名,用编号管理
    【要素】
        数组名(首地址)、元素(堆内存的值)、下标索引(堆内存连续空间)、长度(数组里元素的个数从0开始到最后一个索引减1)
    【特点】
        有序地排列
        数组的类型为引用类型但是数组的元素可以是引用或任意数据类型
        长度一旦确定便不可改,添加只能创建更大的新数组copy旧数组
        通过下标找到指定位置(很快)
        创建数组意味着在堆内存开辟一块连续的空间,而数组名引用的是这块连续空间的首地址
    【分类】
        一维数组、二维数组、多维数组......
        数组元素的类型(基本数据类型)(引用数据类型)
 */
public class 一维数组 {
    /**
         一维数组的使用:
            ①声明与初始化
            ②调用数组的指定位置(元素)
            ③获取数组长度
            ④遍历数组
            ⑤数组元素的默认初始化值 就是不赋值是的默认值
                char类型的初识值是 0 而不是 '0' , int 类型的初始值也是 0
                布尔类型的初始值为 false , 引用数据类型的初始值为 null 就是没有赋值的意思
            ⑥数组的内存解析
     */
    public static void main(String[] args) {
        /**①一维数组的初始化-----------------------------------------------------------------------------*/
        //1.1静态初始化:数组的声明与数组元素的赋值操作同时进行(应用在前提知道值的情况下)
        int[] ids = new int[]{1001 , 1002 , 1003};

        //1.2动态初始化:数组的声明与数组元素的初始化分开进行(后期追加具体值)
        String[] names = new String[5];

        /**②数组元素的调用  数组名[索引] 索引从零开始-------------------------------------------------------*/
        names[0] = "张三";
        names[1] = "李四";
        names[3] = "张宇";
        names[4] = "马雨涵";

        /**③获取数组的长度 数组名.length-----------------------------------------------------------------*/
        System.out.println("数组names的长度为: " + names.length);

        /**④数组的遍历---------------------------------------------------------------------------------*/
        /*
            i的值就是从零开始一次递增,正好吻合了数组的下标我们定义i++就是依次找到数组的每个下标索引位置
         */
        System.out.print("遍历数组ids:");
        for (int i = 0 ; i < ids.length ; i++){
            System.out.print(ids[i] + " "); //数组的下标为 0 1 2
        }
        System.out.println();
        //foreach遍历数组
        System.out.print("遍历数组names: ");
        for (String Str : names){
            System.out.print(Str + " ");
        }
        System.out.println();

        /**⑥数组的内存解析---------------------------------------------------------------------------------------*/
        /**
                【栈内存】
                    是一个线性的结构,有序的先进后出
                    局部变量都存放在栈内存里面,包括对象的引用(对象在堆内存的首地址)

                【堆内存】
                    不是线性的,可以理解为矩阵结构
                    用于存放一切new出来对象的实例 , 数组也是new出来的实例数组类的对象
         【问题】
            int[] arr = new int[]{1,2,3};
            局部变量数组名存放在栈内存里面,元素是new实例化出来的放在堆内存里面(它们怎么交互?怎么引用?)

         【答案】
             new实例化出来数组对象后,对象生成在堆内存并将自己的首地址返回给栈内存里的变量名,通过(变量名) + (索引)每个元素
             数组名存在栈内存里,元素存在堆内存里,数组名存的不是具体元素而是连续空间的首地址
             堆内存开辟出来一块连续的空间(存初始值),数组名指向首地址(16进制数)
             通过数组的(首地址加索引)来引用数组的每个元素,由于空间是连续的所以数组的下标从零开始连续指向后面元素
         */
        int[] arr = new int[]{1,2,3}; //数组名arr在栈内存里,arr存的值是堆内存开辟的那块连续空间的首地址(16进制的)
        String[] arr1 = new String[4];//数组arr1在栈内存里,arr1指向那块连续空间的首地址
        arr1[1] = "刘德华";
        arr1[2] = "张学友"; //数组名指向连续空间首地址,通过数组名 + [下标] 从0开始到数组长度-1的连续值来引用数组的每个元素

        //注意这句话使变量arr1又重新指向了另一个新的堆内存的连续空间首地址(16进制的首地址变了),此时所有元素皆为null
        //见到 new 就开辟空间(这是一定的)
        arr1 = new String[4];
        System.out.println(arr1[1]);

    }
}
